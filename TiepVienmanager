package service;

import entity.TiepVien;
import java.io.*;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

public class TiepVienManager {
    Scanner sc = new Scanner(System.in);

    private List<TiepVien> TiepVienList = new ArrayList<>();

    public void addTiepVien() {
        System.out.print("Nhập mã nhân viên: ");
        String maNhanVien = sc.nextLine().trim();

        System.out.print("Nhập tên nhân viên: ");
        String tenNhanVien = sc.nextLine().trim();

        String ngaySinh;
        do {
            System.out.print("Nhập ngày sinh (dd/mm/yyyy): ");
            ngaySinh = sc.nextLine();
            if (!ngaySinh.matches("^([0-2][0-9]|3[0-1])/([0][1-9]|1[0-2])/([0-9]{4})$")) {
                System.out.println("Định dạng ngày sinh không hợp lệ. Vui lòng nhập lại.");
            }
        } while (!ngaySinh.matches("^([0-2][0-9]|3[0-1])/([0][1-9]|1[0-2])/([0-9]{4})$"));

        System.out.print("Nhập loại nhân viên: ");
        String loaiNhanVien = sc.nextLine().trim();

        String sdt;
        do {
            System.out.print("Nhập số điện thoại: ");
            sdt = sc.nextLine();
            if (!sdt.matches("^0[0-9]{9}$")) {
                System.out.println("Số điện thoại không hợp lệ. Vui lòng nhập lại.");
            }
        } while (!sdt.matches("^0[0-9]{9}$"));

        System.out.print("Nhập địa chỉ: ");
        String diaChi = sc.nextLine().trim();

        String email;
        do {
            System.out.print("Nhập email: ");
            email = sc.nextLine();
            if (!email.matches("^\\S+@\\S+\\.\\S+$")) {
                System.out.println("Email không hợp lệ. Vui lòng nhập lại.");
            }
        } while (!email.matches("^\\S+@\\S+\\.\\S+$"));

        int toeic;
        do {
            System.out.print("Nhập điểm TOEIC: ");
            while (!sc.hasNextInt()) {
                System.out.print("Vui lòng nhập một số hợp lệ cho điểm TOEIC: ");
                sc.next();
            }
            toeic = sc.nextInt();
            sc.nextLine();
            if (toeic < 0) {
                System.out.println("Điểm TOEIC không được âm. Vui lòng nhập lại.");
            }
        } while (toeic < 0);

        writeToFile(maNhanVien, tenNhanVien, ngaySinh, loaiNhanVien, sdt, diaChi, email, toeic);

        System.out.println("Thêm tiếp viên thành công!");
    }


    private void writeToFile(String maNhanVien, String tenNhanVien, String ngaysinh, String loaiNhanVien, String sdt, String diaChi, String email, int Toeic) {
        String fileName = "TiepVien.txt";
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(fileName, true))) {
            writer.write(maNhanVien + "," + tenNhanVien + ","  + ngaysinh + "," + loaiNhanVien + "," + sdt + "," + diaChi + "," + email + "," + Toeic);
            writer.newLine();
        } catch (IOException e) {
            System.out.println("Lỗi khi ghi vào file: " + e.getMessage());
        }
    }

    // Đọc dữ liệu từ file
    public void readFromFile() {
        String fileName = "TiepVien.txt";
        try (BufferedReader reader = new BufferedReader(new FileReader(fileName))) {
            String line;
            while ((line = reader.readLine()) != null) {
                // Tách dòng thành các trường dựa trên dấu phẩy
                String[] fields = line.split(",");

                // Kiểm tra nếu số trường không đủ
                if (fields.length != 8) {
                    System.out.println("Dữ liệu không hợp lệ: " + line);
                    continue;
                }

                // Lấy dữ liệu từ từng trường
                String maNhanVien = fields[0].trim();
                String tenNhanVien = fields[1].trim();
                String ngaySinh = fields[2].trim();
                String loaiNhanVien = fields[3].trim();
                String sdt = fields[4].trim();
                String diaChi = fields[5].trim();
                String email = fields[6].trim();
                int Toeic;

                // Kiểm tra và chuyển đổi điểm toeic
                try {
                    Toeic = Integer.parseInt(fields[7].trim());
                } catch (NumberFormatException e) {
                    System.out.println("điểm toeic không hợp lệ cho tiếp viên: " + tenNhanVien);
                    continue;
                }

                // Tạo đối tượng TiepVien
                TiepVien tv = new TiepVien(maNhanVien, tenNhanVien, ngaySinh, loaiNhanVien, sdt, diaChi, email, Toeic);
                TiepVienList.add(tv);
            }
        } catch (IOException e) {
            System.out.println("Lỗi khi đọc file: " + e.getMessage());
        }
    }

    public void hienThi() {
        readFromFile();
        for (TiepVien tv : TiepVienList) {
            System.out.println(tv);
        }


    }

    public void removeTiepVien() {
        System.out.print("Nhập mã nhân viên tiếp viên cần xóa: ");
        String maNhanVien = sc.nextLine();

        // Đọc từ tệp và tìm tiếp viên cần xóa
        List<TiepVien> updatedList = new ArrayList<>();
        boolean found = false;

        try (BufferedReader reader = new BufferedReader(new FileReader("TiepVien.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] fields = line.split(",");

                if (fields.length != 8) {
                    System.out.println("Dữ liệu không hợp lệ: " + line);
                    continue;
                }

                String currentMaNhanVien = fields[0].trim();
                if (currentMaNhanVien.equals(maNhanVien)) {
                    found = true; // Đã tìm thấy tiếp viên cần xóa
                    continue; // Bỏ qua tiếp viên này để không thêm vào danh sách
                }

                // Nếu không phải tiếp viên cần xóa, thêm vào danh sách cập nhật
                TiepVien tv = new TiepVien(fields[0].trim(), fields[1].trim(), fields[2].trim(),
                        fields[3].trim(), fields[4].trim(), fields[5].trim(),
                        fields[6].trim(), Integer.parseInt(fields[7].trim()));
                updatedList.add(tv);
            }
        } catch (IOException e) {
            System.out.println("Lỗi khi đọc file: " + e.getMessage());
        }

        // Ghi lại danh sách đã cập nhật vào tệp
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("TiepVien.txt"))) {
            for (TiepVien tv : updatedList) {
                writer.write(tv.getMaNhanVien() + "," + tv.getTenNhanVien() + "," + tv.getNgaySinh() + ","
                        + tv.getLoaiNhanVien() + "," + tv.getSdt() + "," + tv.getDiaChi() + ","
                        + tv.getEmail() + "," + tv.getToeic());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("Lỗi khi ghi vào file: " + e.getMessage());
        }

        if (found) {
            System.out.println("Xóa tiếp viên thành công!");
        } else {
            System.out.println("Không tìm thấy tiếp viên với mã nhân viên: " + maNhanVien);
        }
    }
    public void editTiepVien() {
        System.out.print("Nhập mã nhân viên tiếp viên cần chỉnh sửa: ");
        String maNhanVien = sc.nextLine();
        boolean found = false;

        // Đọc từ tệp và tìm tiếp viên cần chỉnh sửa
        List<TiepVien> updatedList = new ArrayList<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("TiepVien.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] fields = line.split(",");

                if (fields.length != 8) {
                    System.out.println("Dữ liệu không hợp lệ: " + line);
                    continue;
                }

                String currentMaNhanVien = fields[0].trim();

                if (currentMaNhanVien.equals(maNhanVien)) {
                    found = true; // Đã tìm thấy tiếp viên cần chỉnh sửa

                    System.out.print("Nhập tên nhân viên mới: ");
                    String tenNhanVien = sc.nextLine();

                    System.out.print("Nhập ngày sinh mới (dd/mm/yyyy): ");
                    String ngaySinh = sc.nextLine();
                    if (!ngaySinh.matches("^([0-2][0-9]|3[0-1])/([0][1-9]|1[0-2])/([0-9]{4})$")) {
                        System.out.println("Định dạng ngày sinh không hợp lệ.");
                        return;
                    }

                    System.out.print("Nhập loại nhân viên mới: ");
                    String loaiNhanVien = sc.nextLine();

                    System.out.print("Nhập số điện thoại mới: ");
                    String sdt = sc.nextLine();
                    if (!sdt.matches("^0[0-9]{9}$")) {
                        System.out.println("Số điện thoại không hợp lệ.");
                        return;
                    }

                    System.out.print("Nhập địa chỉ mới: ");
                    String diaChi = sc.nextLine();

                    System.out.print("Nhập email mới: ");
                    String email = sc.nextLine();
                    if (!email.matches("^\\S+@\\S+\\.\\S+$")) {
                        System.out.println("Email không hợp lệ.");
                        return;
                    }

                    System.out.print("Nhập điểm toeic mới: ");
                    int Toeic = sc.nextInt();
                    sc.nextLine();

                    // Cập nhật thông tin tiếp viên
                    TiepVien tv = new TiepVien(maNhanVien, tenNhanVien, ngaySinh, loaiNhanVien, sdt, diaChi, email, Toeic);
                    updatedList.add(tv);
                } else {

                    TiepVien tv = new TiepVien(fields[0].trim(), fields[1].trim(), fields[2].trim(),
                            fields[3].trim(), fields[4].trim(), fields[5].trim(),
                            fields[6].trim(), Integer.parseInt(fields[7].trim()));
                    updatedList.add(tv);
                }
            }
        } catch (IOException e) {
            System.out.println("Lỗi khi đọc file: " + e.getMessage());
        }

        // Ghi lại danh sách đã cập nhật vào tệp
        try (BufferedWriter writer = new BufferedWriter(new FileWriter("TiepVien.txt"))) {
            for (TiepVien tv : updatedList) {
                writer.write(tv.getMaNhanVien() + "," + tv.getTenNhanVien() + "," + tv.getNgaySinh() + ","
                        + tv.getLoaiNhanVien() + "," + tv.getSdt() + "," + tv.getDiaChi() + ","
                        + tv.getEmail() + "," + tv.getToeic());
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("Lỗi khi ghi vào file: " + e.getMessage());
        }

        if (found) {
            System.out.println("Chỉnh sửa tiếp viên thành công!");
        } else {
            System.out.println("Không tìm thấy tiếp viên với mã nhân viên: " + maNhanVien);
        }
    }

    public void sortTiepVien() {
        readFromFile();
        if (TiepVienList.isEmpty()) {
            System.out.println("Danh sách tiếp viên rỗng.");
            return;
        }

        System.out.println("Chọn tiêu chí sắp xếp:");
        System.out.println("1. Theo tên nhân viên");
        System.out.println("2. Theo điểm toeic");
        System.out.print("Nhập lựa chọn của bạn: ");
        int choice = sc.nextInt();
        sc.nextLine();

        switch (choice) {
            case 1:

                TiepVienList.sort(Comparator.comparing(TiepVien::getTenNhanVien));
                System.out.println("Đã sắp xếp theo tên nhân viên.");
                break;
            case 2:
                // Sắp xếp theo điểm toeic
                TiepVienList.sort(Comparator.comparingInt(TiepVien::getToeic));
                System.out.println("Đã sắp xếp theo điểm toeic.");
                break;
            default:
                System.out.println("Lựa chọn không hợp lệ.");
                return;
        }


        hienThi();
    }



}
